"""Simplest example of using ts_project to transpile and type-check a file"""

load("@aspect_bazel_lib//lib:testing.bzl", "assert_contains")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")

# Type-checks, and emits output to
# bazel-bin/examples/simple/foo.js
# bazel-bin/examples/simple/foo.d.ts
ts_project(
    name = "ts",
    srcs = ["foo.ts"],
    declaration = True,
    # "." is the same as default
    # explicitly given as a regression test for https://github.com/aspect-build/rules_ts/issues/195
    out_dir = ".",
    # Note, the tsconfig attribute defaults to the tsconfig.json file in this directory.
    # tsconfig = "<default>",
    deps = [
        # Two dependencies are linked from first-party code in this repo
        # by the npm_link_package calls in /examples/BUILD.bazel
        "//examples:node_modules/@myorg/js_pkg",
        "//examples:node_modules/@myorg/js_lib",
        "//examples:node_modules/@myorg/dts_pkg",
        # Two dependencies are linked from third-party npm packages
        # by the npm_link_all_packages call in /examples/BUILD.bazel
        "//examples:node_modules/@types/node",
        "//examples:node_modules/date-fns",
    ],
)

# Assert that the output looks like what we expected.
# Demonstrates that we can refer directly to "foo.js" as a pre-declared output.
assert_contains(
    name = "test_js",
    actual = "foo.js",
    expected = """var js_pkg_1 = require("@myorg/js_pkg")""",
)

assert_contains(
    name = "test_dts",
    actual = "foo.d.ts",
    expected = "export declare const b: string",
)
