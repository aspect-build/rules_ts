load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@aspect_bazel_lib//lib:testing.bzl", "assert_outputs")
load("@aspect_rules_js//js:defs.bzl", "js_test")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")
load("@bazel_skylib//rules:build_test.bzl", "build_test")

genrule(
    name = "generated_json_file",
    outs = ["src/generated.json"],
    cmd = "echo 1 > $@",
)

ts_config(
    name = "config",
    src = "tsconfig.json",
    deps = [
        "types/typings.d.ts",
        "//examples:node_modules/@types/node",
    ],
)

ts_project(
    name = "ts",
    srcs = [
        "src/index.ts",
    ],
    assets = [
        "src/styles.css",
        "src/generated.json",
    ],
    tsconfig = ":config",
)

ts_project(
    name = "ts-out",
    srcs = [
        "src/index.ts",
    ],
    assets = [
        "src/styles.css",
        "src/generated.json",
    ],
    extends = ":config",
    out_dir = "out",
    tsconfig = {"compilerOptions": {"outDir": "out"}},
)

ts_project(
    name = "ts-runtime-assets",
    srcs = ["src/index-runtime.ts"],
    assets = ["src/generated.json"],
    tsconfig = ":config",
)

js_test(
    name = "ts-runtime-assets_test",
    data = [":ts-runtime-assets"],
    entry_point = "src/index-runtime.js",
)

ts_project(
    name = "ts-runtime-outdir-assets",
    srcs = ["src/index-runtime.ts"],
    assets = ["src/generated.json"],
    extends = ":config",
    out_dir = "out",
    tsconfig = {"compilerOptions": {"outDir": "out"}},
)

js_test(
    name = "ts-runtime-outdir-assets_test",
    data = [":ts-runtime-outdir-assets"],
    entry_point = "out/src/index-runtime.js",
)

filegroup(
    name = "assets-filegroup",
    srcs = [
        "src/generated.json",
        "src/styles.css",
    ],
)

ts_project(
    name = "ts-out-target",
    srcs = [
        "src/index.ts",
    ],
    assets = [":assets-filegroup"],
    out_dir = "out-target",
    tsconfig = ":config",
)

assert_outputs(
    name = "ts-out-target_outputs_test",
    actual = ":ts-out-target",
    expected = [
        "examples/assets/out-target/src/generated.json",
        "examples/assets/out-target/src/index.js",
        "examples/assets/out-target/src/styles.css",
    ],
)

copy_to_directory(
    name = "assets-directory",
    srcs = [
        "src/generated.json",
        "src/styles.css",
    ],
)

ts_project(
    name = "ts-out-copy-target",
    srcs = [
        "src/index.ts",
    ],
    assets = [":assets-filegroup"],
    out_dir = "out-copy-target",
    tsconfig = ":config",
)

assert_outputs(
    name = "ts-out-copy-target_outputs_test",
    actual = ":ts-out-copy-target",
    expected = [
        "examples/assets/out-copy-target/src/generated.json",
        "examples/assets/out-copy-target/src/index.js",
        "examples/assets/out-copy-target/src/styles.css",
    ],
)

ts_project(
    name = "ts-out-copy-target-abs",
    srcs = [
        "src/index.ts",
    ],
    assets = [
        "//%s:assets-filegroup" % package_name(),
    ],
    out_dir = "out-copy-target-abs",
    tsconfig = ":config",
)

assert_outputs(
    name = "ts-out-copy-target-abs_outputs_test",
    actual = ":ts-out-copy-target-abs",
    expected = [
        "examples/assets/out-copy-target-abs/src/generated.json",
        "examples/assets/out-copy-target-abs/src/index.js",
        "examples/assets/out-copy-target-abs/src/styles.css",
    ],
)

ts_project(
    name = "ts-root",
    srcs = [
        "src/index.ts",
    ],
    assets = [
        "src/styles.css",
        "src/generated.json",
    ],
    root_dir = "src",
    tsconfig = ":config",
)

genrule(
    name = "generated_root_output_file",
    outs = ["root-out/metadata/generated_metadata.json"],
    cmd = "echo 1 > $@",
)

ts_project(
    name = "ts-root-out",
    srcs = [
        "src/index.ts",
    ],
    assets = [
        "root-out/metadata/generated_metadata.json",
        "src/styles.css",
        "src/generated.json",
    ],
    out_dir = "root-out",
    root_dir = "src",
    tsconfig = ":config",
)

assert_outputs(
    name = "ts-root-out_outputs_test",
    actual = ":ts-root-out",
    expected = [
        "examples/assets/root-out/generated.json",
        "examples/assets/root-out/index.js",
        "examples/assets/root-out/metadata/generated_metadata.json",
        "examples/assets/root-out/styles.css",
    ],
)

build_test(
    name = "test",
    targets = [
        # Defaults of no root/out_dir
        ":ts",
        ":src/index.js",
        # out_dir
        ":ts-out",
        ":out/src/index.js",
        # root_dir
        ":ts-root",
        ":index.js",
        # root_dir + out_dir
        ":ts-root-out",
        ":root-out/index.js",
        # asset targets instead of files
        ":ts-out-target",
        ":ts-out-copy-target",
        ":ts-out-copy-target-abs",
    ],
)
