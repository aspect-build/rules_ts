name: CI

# Controls when the action will run.
on:
    # Triggers the workflow on push or pull request events but only for the main branch
    push:
        branches: [main, 2.x, 3.x]
    pull_request:
        branches: [main, 2.x, 3.x]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

concurrency:
    # Cancel previous actions from the same PR or branch except 'main' branch.
    # See https://docs.github.com/en/actions/using-jobs/using-concurrency and https://docs.github.com/en/actions/learn-github-actions/contexts for more info.
    group: concurrency-group::${{ github.workflow }}::${{ github.event.pull_request.number > 0 && format('pr-{0}', github.event.pull_request.number) || github.ref_name }}${{ github.ref_name == 'main' && format('::{0}', github.run_id) || ''}}
    cancel-in-progress: ${{ github.ref_name != 'main' }}

jobs:
    # Prepares dynamic test matrix values
    matrix-prep:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - id: bazel-version
              name: Prepare 'bazel-version' matrix axis
              run: |
                  v=$(head -n 1 .bazelversion)
                  m=${v::1}
                  a=(
                    "major:$m, version:\"$v\""
                    "major:6, version:\"6.5.0\""
                  )
                  printf -v j '{%s},' "${a[@]}"
                  echo "res=[${j%,}]" | tee -a $GITHUB_OUTPUT
            - id: os
              name: Prepare 'os' matrix axis
              # Only run MacOS and Windows on main branch (not PRs) to minimize minutes (billed at 10X and 2X respectively)
              # https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#included-storage-and-minutes
              run: |
                  a=( ubuntu )
                  if [[ "${{ github.ref_name }}" == "main" ]] || [[ "${{ github.head_ref }}" == *"macos"* ]]; then
                    a+=( macos )
                  fi
                  if [[ "${{ github.ref_name }}" == "main" ]] || [[ "${{ github.head_ref }}" == *"windows"* ]]; then
                    a+=( windows )
                  fi
                  printf -v j '"%s",' "${a[@]}"
                  echo "res=[${j%,}]" | tee -a $GITHUB_OUTPUT
        outputs:
            bazel-version: ${{ steps.bazel-version.outputs.res }}
            os: ${{ steps.os.outputs.res }}

    test:
        runs-on: ${{ matrix.os }}-latest
        needs:
            - matrix-prep
        strategy:
            fail-fast: false
            matrix:
                bazel-version: ${{ fromJSON(needs.matrix-prep.outputs.bazel-version) }}
                bzlmod: [1, 0]
                os: ${{ fromJSON(needs.matrix-prep.outputs.os) }}
                folder:
                    - '.'
                    - 'e2e/bzlmod'
                    - 'e2e/external_dep'
                    - 'e2e/external_dep/app'
                    - 'e2e/worker'
                    - 'e2e/workspace'
                exclude:
                    # Don't test MacOS and Windows against secondary bazel version to minimize minutes (billed at 10X and 2X respectively)
                    # https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#included-storage-and-minutes
                    - os: macos
                      bazel-version:
                          major: 6
                    - os: windows
                      bazel-version:
                          major: 6
                    # Dont' test root workspace with Bazel 6 to reduce the size of the test matrix
                    - bazel-version:
                          major: 6
                      folder: .
                    # Don't run bzlmod tests with Bazel 6 to reduce the size of the test matrix
                    - bazel-version:
                          major: 6
                      bzlmod: 1
                    # Disable some broken tests on Windows
                    - os: windows
                      folder: .
                    - os: windows
                      folder: e2e/worker
                    - os: windows
                      folder: e2e/bzlmod
                    # TODO: combine bzlmod and workspace into a single 'smoke' e2e
                    - folder: e2e/bzlmod
                      bzlmod: 0
                    - folder: e2e/workspace
                      bzlmod: 1

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - uses: actions/checkout@v4

            - name: Mount bazel caches
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/bazel-disk-cache
                      ~/.cache/bazel-repository-cache
                      ~/.cache/xdg-cache
                  key: >-
                      bazel-cache-${{ matrix.bazel-version.version }}-${{ matrix.bzlmod }}-${{ matrix.os }}-${{ matrix.folder }}-
                      ${{ hashFiles('.bazelrc', '.bazelversion', '.bazeliskrc', '**/BUILD', '**/BUILD.bazel', '**/*.bzl', 'WORKSPACE', 'WORKSPACE.bazel', 'WORKSPACE.bzlmod', 'MODULE.bazel', '**/*.js', '!e2e') }}-
                      ${{ hashFiles(format('{0}/.bazelrc', matrix.folder), format('{0}/.bazelversion', matrix.folder), format('{0}/.bazeliskrc', matrix.folder), format('{0}/**/BUILD', matrix.folder), format('{0}/**/BUILD.bazel', matrix.folder), format('{0}/**/*.bzl', matrix.folder), format('{0}/WORKSPACE', matrix.folder), format('{0}/WORKSPACE.bazel', matrix.folder), format('{0}/WORKSPACE.bzlmod', matrix.folder), format('{0}/MODULE.bazel', matrix.folder), format('{0}/MODULE.bazel.lock', matrix.folder), format('{0}/**/*.js', matrix.folder)) }}
                  restore-keys: |
                      bazel-cache-${{ matrix.bazel-version.version }}-${{ matrix.bzlmod }}-${{ matrix.os }}-${{ matrix.folder }}-

            - name: Configure Bazel version
              working-directory: ${{ matrix.folder }}
              shell: bash
              run: |
                  # Overwrite the .bazelversion instead of using USE_BAZEL_VERSION so that Bazelisk
                  # still bootstraps Aspect CLI from configuration in .bazeliskrc. Aspect CLI will
                  # then use .bazelversion to determine which Bazel version to use.
                  echo "${{ matrix.bazel-version.version }}" > .bazelversion
                  # Delete all the version specific bazelrc files that are used for local development
                  # since the version we're testing against is dynamic. These are just symlinks and the
                  # root .bazelrc brings these in with try-imports. In this CI workflows, we explicitly
                  # bring in the version specific bazelrc file with --bazelrc when we invoke bazel.
                  rm ${GITHUB_WORKSPACE//\\/\/}/.aspect/bazelrc/bazel*.bazelrc

            # TODO: remove this block once we have Aspect CLI Windows releases
            - name: Don't use Aspect CLI on Windows
              if: matrix.os == 'windows'
              working-directory: ${{ matrix.folder }}
              shell: bash
              run: rm -f .bazeliskrc

            - name: bazel test //...
              working-directory: ${{ matrix.folder }}
              shell: bash
              run: |
                  bazel \
                    --bazelrc=${GITHUB_WORKSPACE//\\/\/}/.github/workflows/bazel${{ matrix.bazel-version.major }}.bazelrc \
                    --bazelrc=${GITHUB_WORKSPACE//\\/\/}/.aspect/bazelrc/ci.bazelrc \
                    --bazelrc=${GITHUB_WORKSPACE//\\/\/}/.github/workflows/ci.bazelrc \
                    test \
                    --test_tag_filters=-skip-on-bazel${{ matrix.bazel-version.major }},-skip-on-bzlmod-${{ matrix.bzlmod }} \
                    --build_tag_filters=-skip-on-bazel${{ matrix.bazel-version.major }},-skip-on-bzlmod-${{ matrix.bzlmod }} \
                    --enable_bzlmod=${{ matrix.bzlmod }} \
                    //...
              env:
                  XDG_CACHE_HOME: ~/.cache/xdg-cache # bazelisk will download bazel to here

    test-worker:
        runs-on: ubuntu-latest
        needs:
            - matrix-prep
        strategy:
            fail-fast: false
            matrix:
                bazel-version: ${{ fromJSON(needs.matrix-prep.outputs.bazel-version) }}
                exclude:
                    - bazel-version:
                          major: 6
        steps:
            - uses: actions/checkout@v4

            - name: Configure Bazel version
              working-directory: e2e/test
              # Overwrite the .bazelversion instead of using USE_BAZEL_VERSION so that Bazelisk
              # still bootstraps Aspect CLI from configuration in .bazeliskrc. Aspect CLI will
              # then use .bazelversion to determine which Bazel version to use
              run: echo "${{ matrix.bazel-version.version }}" > .bazelversion

            - uses: pnpm/action-setup@v2
              with:
                  version: '7.14.2'

            - name: Setup bats
              uses: mig4/setup-bats@v1
              with:
                  bats-version: '1.8.2'

            - name: Setup bats helpers
              uses: brokenpip3/setup-bats-libs@0.0.3
              with:
                  support-path: /usr/lib/bats/bats-support
                  support-version: '0.3.0'
                  assert-path: /usr/lib/bats/bats-assert
                  assert-version: '2.1.0'

            - name: bats -r .
              working-directory: e2e/test
              run: |
                  echo "import $GITHUB_WORKSPACE/.github/workflows/ci.bazelrc" > .bazelrc
                  bats -r .

    # For branch protection settings, this job provides a "stable" name that can be used to gate PR merges
    # on "all matrix jobs were successful".
    conclusion:
        needs: test
        runs-on: ubuntu-latest
        if: always()
        steps:
            - uses: technote-space/workflow-conclusion-action@45ce8e0eb155657ab8ccf346ade734257fd196a5 # v3.0.3

            # Note: possible conclusion values:
            # https://github.com/technote-space/workflow-conclusion-action/blob/main/src/constant.ts
            - name: report success
              if: ${{ env.WORKFLOW_CONCLUSION == 'success' }}
              working-directory: /tmp
              run: echo ${{ env.WORKFLOW_CONCLUSION }} && exit 0

            - name: report failure
              if: ${{ env.WORKFLOW_CONCLUSION == 'failure' }}
              working-directory: /tmp
              run: echo ${{ env.WORKFLOW_CONCLUSION }} && exit 1
